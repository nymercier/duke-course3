import edu.duke.*;
import org.apache.commons.csv.*;
import java.io.*;

public class CaesarCipher2 {

    public String encrypt(String input, int key) {
    
        //Make a StringBuilder with message (encrypted)
        StringBuilder encrypted = new StringBuilder(input.toLowerCase());
        
        //Write down the alphabet
        String alphabet1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String alphabet = alphabet1.toLowerCase();
        
        //Compute the shifted alphabet
        String shiftedAlphabet = alphabet.substring(key)+
        alphabet.substring(0,key);
        //System.out.println(shiftedAlphabet);
        
        //Count from 0 to < length of encrypted, (call it i)
        
        for(int i = 0; i < encrypted.length(); i++) {
        
            //Look at the ith character of encrypted (call it currChar)
            char currChar = encrypted.charAt(i);
            
            //Find the index of currChar in the alphabet (call it idx)
            int idx = alphabet.indexOf(currChar);
            
            //If currChar is in the alphabet
            if(idx != -1){
                //Get the idxth character of shiftedAlphabet (newChar)
                char newChar = shiftedAlphabet.charAt(idx);
                //Replace the ith character of encrypted with newChar
                encrypted.setCharAt(i, newChar);
            }
            //Otherwise: do nothing
        }
        //Your answer is the String inside of encrypted
        return encrypted.toString();
    }
    
    public void testCaesar() {
        int key = 15;
        String encrypted = encrypt("Just a test string with lots of eeeeeeeeeeeeeeeees", key);
        System.out.println("key is " + key + "\n" + encrypted);
    }
    
    public String encrypt2 (String input, int key1, int key2) {
        
        //Make a StringBuilder with message (encrypted)
        StringBuilder encrypted = new StringBuilder(input.toLowerCase());
        
        //Write down the alphabet
        String alphabet1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String alphabet = alphabet1.toLowerCase();
        
        //Compute the shifted alphabet
        String shiftedAlphabetkey1 = alphabet.substring(key1)+
        alphabet.substring(0,key1);
        String shiftedAlphabetkey2 = alphabet.substring(key2)+
        alphabet.substring(0,key2);
       
        for(int i = 0; i < encrypted.length(); i++) {
            
            //Look at the ith character of encrypted (call it currChar)
            char currChar = encrypted.charAt(i);
            
            //Find the index of currChar in the alphabet (call it idx)
            int idx = alphabet.indexOf(currChar);
            
            //System.out.println(idx);
            
            //If currChar is in the alphabet
            if(idx !=-1) {

                if (i%2 == 0){
                    //Get the idxth character of shiftedAlphabet (newChar)
                    char newChar = shiftedAlphabetkey1.charAt(idx);
                    //Replace the ith character of encrypted with newChar
                    encrypted.setCharAt(i, newChar);
                }
                else {
                    char newChar = shiftedAlphabetkey2.charAt(idx);
                    //System.out.println(newChar);
                    //Replace the ith character of encrypted with newChar
                    encrypted.setCharAt(i, newChar);
                    //Otherwise: do nothing
                }
            }
        }
        //Your answer is the String inside of encrypted
        return encrypted.toString();
    }
    
    public void testencrypt2() {
        int key1 = 21;
        int key2 = 8;
        //String encrypted = encrypt2("At noon be in the conference room with your hat on for a surprise party. YELL LOUD!", key1, key2);
        String encrypted = encrypt2("Can you imagine life WITHOUT the internet AND computers in your pocket?", key1, key2);
        System.out.println("key is " + key1 + key2 + "\n" + encrypted);
    }
    
    public int [] countLetters (String message) {

        String alphabet1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String alphabet = alphabet1.toLowerCase();
        int [] counts = new int[26];
        for (int k=0; k < message.length(); k++) {
            char ch = Character.toLowerCase(message.charAt(k));
            int dex = alphabet.indexOf(ch);
            //System.out.println("dex"+dex);
            if (dex != -1) {
                counts[dex] ++;
                //System.out.println(counts[dex]);
            }
            //System.out.println("position de la lettre est "+k+" à un index de "+dex);
        }
        return counts;
    }
           
    public int maxIndex (int [] vals) {
        int maxDex =0;
        for (int k=0; k<vals.length; k++) {
            if (vals[k] > vals[maxDex]) {
                maxDex=k;
            }
        }
        return maxDex;
    }
        
    public String decrypt (String encrypted) {
        CaesarCipher cc = new CaesarCipher();
        int [] freqs = countLetters(encrypted);
        int maxDex = maxIndex(freqs);
        //System.out.println("maxDex"+maxDex);
        int dkey = maxDex -4;
        if (maxDex < 4) {
            dkey = 26 - (4-maxDex);
        }
        //System.out.println("decrypt"+cc.encrypt(encrypted,26-dkey));
        return cc.encrypt(encrypted,26-dkey);
    }
    
    public void testdecrypt () {
        String message = "yjhi p ithi higxcv lxiw adih du ttttttttttttttttth";
        String messagecode = decrypt(message);
        System.out.println("la réponse du testdecrypt est : "+messagecode);
    }
    
    public String halfOfString (String message, int start) {
       String answer = "";
        for (int k = start; k< message.length() ; k+= 2) {
           answer = answer + message.charAt(k);    	
       }
       return answer;
    }
    
    public void testhalfOfString() {
        String message = "Qbkm Zgis";
        String moitie = halfOfString(message, 1);
        System.out.println(moitie);
    }
    
    public int getKey (String s) {
        //s = "yjhi p ithi higxcv lxiw adih du ttttttttttttttttth";
        int [] freqs = countLetters(s);
        int maxDex = maxIndex(freqs);
        int dkey = maxDex -4;
        if (maxDex < 4) {
            dkey = 26 - (4-maxDex);
        }
        System.out.println("clé est :"+dkey);
        return dkey;
    }
    
    public void testgetKey () {
        String s = "yjhi p ithi higxcv lxiw adih du ttttttttttttttttth";
        int dkey = getKey(s);
        System.out.println("clé est :"+dkey);
        
    }
    
    public String decryptTwoKeys (String encrypted) {
        CaesarCipher cc = new CaesarCipher();
        String firstchar = halfOfString(encrypted,0);
        String secondchar = halfOfString(encrypted,1);
        int firstkey = getKey(firstchar);
        int secondkey = getKey(secondchar);
        System.out.println("1ere clé :"+firstkey+" et "+"2e clé :"+secondkey);
        return cc.encrypt2(encrypted, (26-firstkey),(26-secondkey));
    }
    
    public void testdecryptTwoKeys () {
        FileResource resource = new FileResource();
        String messagecode = resource.asString();
        //String message = "Aal uttx hm aal Qtct Fhljha pl Wbdl. Pvxvxlx!";
        String messagecode2 = decryptTwoKeys(messagecode);
        System.out.println("la réponse du testdecrypt2keys est : "+messagecode2);
    }
}

