import edu.duke.*;
import java.util.*;
import java.util.ArrayList;

public class GladLib2 {
    
    private HashMap<String,ArrayList<String>> myMap;

    private ArrayList<Integer> myFreqs;
    private ArrayList<String> myWords;
    
    private Random myRandom;
    
    private static String dataSourceURL = "http://dukelearntoprogram.com/course3/data";
    private static String dataSourceDirectory = "data";
    
    public GladLib2(){
        initializeFromSource(dataSourceDirectory);
        myRandom = new Random();
        myWords = new ArrayList<String>();
        myFreqs = new ArrayList<Integer>();
        myMap = new HashMap<String,ArrayList<String>>();
    }
    
    
    public GladLib2(String source){
        initializeFromSource(source);
        myRandom = new Random();
    }
         
    private void initializeFromSource(String source) {
        String[] categories = {"adjective", "noun", "color", "country", "name", "animal", "time", "verb", "fruit"};
        ArrayList<String> newList = new ArrayList<String>();
        for (int i = 0; i < categories.length; i++) {
            String category = categories[i];
            String sourced = source + "/" +  category + ".txt";
            newList = readIt(sourced);
            System.out.println("myMap is:" + myMap + "\t category: " + category + "\t list:" + newList); // <--- Line for debugging
            myMap.put(category, newList); // <--- BREAKS HERE
            newList = new ArrayList<>();
        }
    }
    
    private String randomFrom(ArrayList<String> source){
        int index = myRandom.nextInt(source.size());
        return source.get(index);
    }
    
    private String getSubstitute(String label) {
        if (label.equals("number")){
            return ""+myRandom.nextInt(50)+5;
        }
        return randomFrom(myMap.get(label));
    }
    
    private String processWord(String w){
        int first = w.indexOf("<");
        int last = w.indexOf(">",first);
        
        if (first == -1 || last == -1){
            return w;
        }
        
        String prefix = w.substring(0,first);
        String suffix = w.substring(last+1);
        String sub = getSubstitute(w.substring(first+1,last));
        
        int index = myWords.indexOf(sub);
                       
        sub = getSubstitute(w.substring(first+1,last));
        
        ArrayList<String> wordsUsed = new ArrayList<String>();
        
        while (true) {
            if (!wordsUsed.contains(sub)) {
                wordsUsed.add(sub);
                break;
            }
        }
        
        if (index == -1) {
            myWords.add(sub);
            myFreqs.add(1);
        }
        else {
            int freq = myFreqs.get(index);
            myFreqs.set(index,freq+1);
            System.out.println("nb de fois :"+sub+" est "+myFreqs.get(index));
            sub = getSubstitute(w.substring(first+1,last));
            if (index != 1) {
                sub = sub;
            }
        }
        
        //System.out.println("prefix "+prefix+"sub "+sub+"suffix "+suffix);
        //System.out.println("words "+myWords.get(sub)+"freqs "+myFreqs.get(index));
        return prefix+sub+suffix;
        //System.out.println("prefix "prefix+"sub "+sub+"suffix "+suffix);
    }
    
    private void printOut(String s, int lineWidth){
        int charsWritten = 0;
        for(String w : s.split("\\s+")){
            if (charsWritten + w.length() > lineWidth){
                System.out.println();
                charsWritten = 0;
            }
            System.out.print(w+" ");
            charsWritten += w.length() + 1;
        }
    }
    
    private String fromTemplate(String source){
        String story = "";
        if (source.startsWith("http")) {
            URLResource resource = new URLResource(source);
            for(String word : resource.words()){
                story = story + processWord(word) + " ";
            }
        }
        else {
            FileResource resource = new FileResource(source);
            for(String word : resource.words()){
                story = story + processWord(word) + " ";
            }
        }
        return story;
    }
    
    private ArrayList<String> readIt(String source){
        ArrayList<String> list = new ArrayList<String>();
        if (source.startsWith("http")) {
            URLResource resource = new URLResource(source);
            for(String line : resource.lines()){
                list.add(line);
            }
        }
        else {
            FileResource resource = new FileResource(source);
            for(String line : resource.lines()){
                list.add(line);
            }
        }
        return list;
    }
    
    public void makeStory(){
        myFreqs.clear();
        myWords.clear();
        
        System.out.println("\n");
        String story = fromTemplate("datalong/madtemplate2.txt");
      
        printOut(story, 60);

    }
}
    
